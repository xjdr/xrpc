// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: xjeffrose/example/dino.proto
package com.xjeffrose.xrpc.example;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class DinoResponse extends Message<DinoResponse, DinoResponse.Builder> {
  public static final ProtoAdapter<DinoResponse> ADAPTER = new ProtoAdapter_DinoResponse();

  private static final long serialVersionUID = 0L;

  /**
   * List of Dinos
   */
  @WireField(
      tag = 1,
      adapter = "com.xjeffrose.xrpc.example.Dino#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Dino> dinos;

  public DinoResponse(List<Dino> dinos) {
    this(dinos, ByteString.EMPTY);
  }

  public DinoResponse(List<Dino> dinos, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.dinos = Internal.immutableCopyOf("dinos", dinos);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.dinos = Internal.copyOf("dinos", dinos);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DinoResponse)) return false;
    DinoResponse o = (DinoResponse) other;
    return unknownFields().equals(o.unknownFields())
        && dinos.equals(o.dinos);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + dinos.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!dinos.isEmpty()) builder.append(", dinos=").append(dinos);
    return builder.replace(0, 2, "DinoResponse{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<DinoResponse, Builder> {
    public List<Dino> dinos;

    public Builder() {
      dinos = Internal.newMutableList();
    }

    /**
     * List of Dinos
     */
    public Builder dinos(List<Dino> dinos) {
      Internal.checkElementsNotNull(dinos);
      this.dinos = dinos;
      return this;
    }

    @Override
    public DinoResponse build() {
      return new DinoResponse(dinos, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_DinoResponse extends ProtoAdapter<DinoResponse> {
    public ProtoAdapter_DinoResponse() {
      super(FieldEncoding.LENGTH_DELIMITED, DinoResponse.class);
    }

    @Override
    public int encodedSize(DinoResponse value) {
      return Dino.ADAPTER.asRepeated().encodedSizeWithTag(1, value.dinos)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, DinoResponse value) throws IOException {
      Dino.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.dinos);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public DinoResponse decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.dinos.add(Dino.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public DinoResponse redact(DinoResponse value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.dinos, Dino.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
